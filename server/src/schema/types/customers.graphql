extend type Query {
    listAllCustomer(input: ListAllCustomerInput!): CustomerConnection!

    getCustomerById(CustomerId: Int!): Customer!
}

extend type Mutation {
    createCustomer(input: CreateCustomerInput!): Customer!

    updateCustomer(input: UpdateCustomerInput!): SuccessResponse!

    deleteCustomer(input: DeleteCustomerInput!): SuccessResponse!
}

type Customer {
    id: Int!
    name: String
    phoneNumber: String!
    email: String
    address: String
    companyName: String
    createdAt: Date
    updatedAt: Date
}

type CustomerConnection {
    edges: [CustomerEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type CustomerEdge {
    cursor: String!
    node: Customer
}

input CreateCustomerInput {
    name: String
    phoneNumber: String!
    email: String
    address: String
    companyName: String
}

input UpdateCustomerInput {
    id: Int!
    name: String
    phoneNumber: String
    email: String
    address: String
    companyName: String
}

input DeleteCustomerInput {
    ids: [Int!]!
}

input ListAllCustomerInput {
    args: PaginationInput
    searchQuery: String
}