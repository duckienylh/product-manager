extend type Query {
    listAllOrder(input: ListAllOrderInput!): ListAllOrderResponse!

    getOrderById(orderId: Int!): Order!
}

extend type Mutation {
    createOrder(input: CreateOrderInput!): Order!

    updateOrder(input: UpdateOrderInput!): SuccessResponse!
}

enum StatusOrder {
    creatNew
    createExportOrder
    delivering
    successDelivery
    paymentConfirmation
    paid
    done
}

type Order {
    id: Int!
    sale: User!
    customer: Customer!
    invoiceNo: String!
    VAT: Float
    totalMoney: Float
    status: StatusOrder!
    discount: Float
    freightPrice: Float
    deliverAddress: String
    orderItemList: [OrderItem]
    deliverOrderList: [DeliverOrder]
    createdAt: Date
    updatedAt: Date
}

type OrderEdge {
    cursor: String!
    node: Order
}

type OrderConnection {
    edges: [OrderEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ListAllOrderResponse {
    allOrderCounter: Int!
    creatNewOrderCounter: Int!
    createExportOrderCounter: Int!
    deliveryOrderCounter: Int!
    doneOrderCounter: Int!
    orders: OrderConnection
    paidOrderCounter: Int!
    paymentConfirmationOrderCounter: Int!
    successDeliveryOrderCounter: Int!
    totalCompleted: Float
    totalDeliver: Float
    totalPaid: Float
    totalRevenue: Float
}

input CreateOrderInput {
    saleId: Int!
    customerId: Int!
    VAT: Float
    product: [productInput!]!
    discount: Float
    freightPrice: Float
    deliverAddress: String
}

input productInput {
    description: String
    priceProduct: Float!
    productId: Int!
    quantity: Int!
}

input UpdateOrderInput {
    id:Int!
    saleId: Int!
    customerId: Int
    invoiceNo: String
    VAT: Float
    status: StatusOrder
    discount: Float
    freightPrice: Float
    deliverAddress: String
    product: [UpdateProductOrderInput!]
}

input UpdateProductOrderInput {
    orderItem: Int
    productId: Int!
    description: String
    priceProduct: Float
    quantity: Int
}

input filterDate {
    endAt: Date!
    startAt: Date!
}

input ListAllOrderInput {
    args: PaginationInput
    createAt: filterDate
    invoiceNo: String
    queryString: String
    saleId: Int
    status: StatusOrder
}