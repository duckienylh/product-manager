extend type Query {
    listAllProduct(input: ListAllProductInput!): ProductConnection!

    getProductById(productId: Int!): Product!
}

extend type Mutation {
    createProduct(input: CreateProductInput!): Product!

    updateProduct(input: UpdateProductInput!): SuccessResponse!

    deleteProduct(input: DeleteProductInput!): SuccessResponse!

    importExcelProduct(input: ImportExcelProductInput!): [Product]!
}

type Product {
    id: Int!
    category: Category!
    name: String!
    code: String!
    price: Float!
    quantity: Float
    inventory: Float
    height: Float
    width: Float
    weight: Float
    age: Int
    image: String
    description: String
    imagesOfProduct: [ImageOfProduct]
    createdAt: Date
    updatedAt: Date
}

type ImageOfProduct {
    id: Int!
    product: Product!
    fileName: String!
    uploadBy: User
    mineType: String
    keyPath: String!
    url: String!
    encoding: String
    createdAt: Date
    updatedAt: Date
}

type ProductConnection {
    edges: [ProductEdge]
    pageInfo: PageInfo!
    totalCount: Int!
}

type ProductEdge {
    cursor: String!
    node: Product
}

input CreateProductInput {
    categoryId: Int!
    name: String!
    code: String!
    price: Float!
    quantity: Float
    inventory: Float
    height: Float
    width: Float
    weight: Float
    age: Int
    image: Upload
    imagesOfProduct: [Upload]
    description: String
}

input UpdateProductInput {
    id: Int!
    categoryId: Int
    name: String
    code: String
    price: Float
    quantity: Float
    inventory: Float
    height: Float
    width: Float
    weight: Float
    age: Int
    image: Upload
    imagesOfProduct: [Upload]
    description: String
}

input DeleteProductInput {
    ids: [Int!]!
}

input ListAllProductInput {
    stringQuery: String
    categoryId: Int
    checkInventory: Boolean
    args: PaginationInput
}

input ImportExcelProductInput {
    fileExcelProducts: Upload!
}
